راهنمای نهایی: ساخت ابزارهای سفارشی برای Saino Elite

معماری جدید Saino Elite به شما اجازه می‌دهد تا به راحتی ابزارهای پایتونی خود را بسازید و آن‌ها را به صورت پویا به برنامه اضافه کنید. هر ابزار جدید، یک قابلیت تازه به Agent هوشمند شما می‌بخشد.

مفهوم اصلی
برنامه به صورت خودکار فایل‌های پایتون موجود در پوشه tools/ را اسکن کرده و هر کلاسی که از BaseTool ارث‌بری کرده باشد را به عنوان یک ابزار جدید شناسایی و بارگذاری می‌کند.

ساختار یک ابزار
هر ابزار باید در یک فایل پایتون مجزا در پوشه tools/ قرار گیرد و ساختار زیر را داشته باشد:

name (str): نام منحصر به فرد ابزار (انگلیسی و بدون فاصله).

description (str): توضیح کامل و دقیق عملکرد ابزار به زبان طبیعی.

parameters (dict): یک دیکشنری مطابق با استاندارد JSON Schema که پارامترهای ورودی را تعریف می‌کند.

execute(self, **kwargs) (async def): متد اصلی که منطق ابزار شما در آن پیاده‌سازی می‌شود و یک دیکشنری به عنوان خروجی برمی‌گرداند.

مثال کامل: ساخت ابزار get_weather
تکه‌کد

# tools/weather_tool.py
from tools.base import BaseTool
import logging
import aiohttp
import chainlit as cl

logger = logging.getLogger(__name__)

class WeatherTool(BaseTool):
    name = "get_weather"
    description = "اطلاعات آب‌وهوای فعلی یک شهر خاص را از یک سرویس آنلاین دریافت می‌کند."
    parameters = {
        "type": "object",
        "properties": {
            "city": {
                "type": "string",
                "description": "نام شهر، به عنوان مثال: Tehran"
            },
            "unit": {
                "type": "string",
                "description": "واحد دما، 'celsius' یا 'fahrenheit'. پیش‌فرض 'celsius' است.",
                "enum": ["celsius", "fahrenheit"]
            }
        },
        "required": ["city"],
    }

    async def execute(self, city: str, unit: str = "celsius") -> dict:
        logger.info(f"ابزار آب‌وهوا برای شهر '{city}' فراخوانی شد.")
        await cl.Message(content=f"🌦️ در حال دریافت اطلاعات آب‌وهوا برای شهر {city}...").send()
        API_URL = f"https://wttr.in/{city}?format=j1"
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(API_URL) as response:
                    response.raise_for_status()
                    data = await response.json()

            current_condition = data['current_condition'][0]
            temp_key = 'temp_C' if unit == 'celsius' else 'temp_F'
            result = {
                "city": data['nearest_area'][0]['areaName'][0]['value'],
                "temperature": current_condition[temp_key],
                "condition": current_condition['weatherDesc'][0]['value'],
                "humidity": current_condition['humidity'] + "%",
                "wind_speed": current_condition['windspeedKmph'] + " km/h",
                "unit": unit
            }
            return {"status": "ok", "data": result}
        except Exception as e:
            logger.error(f"خطا در دریافت اطلاعات آب‌وهوا: {e}")
            return {"status": "error", "error": f"اطلاعات آب‌وهوا برای شهر '{city}' یافت نشد. لطفاً نام شهر را به انگلیسی وارد کنید."}
نکات کلیدی و بهترین شیوه‌ها
توضیحات دقیق (Description): مهم‌ترین بخش است که به مدل می‌فهماند ابزار چه کاری می‌کند.

خروجی استاندارد: همیشه خروجی execute باید یک دیکشنری با کلید status باشد.

مدیریت خطا: از بلوک try...except برای جلوگیری از از کار افتادن برنامه استفاده کنید.

اطلاع‌رسانی به کاربر: با استفاده از cl.Message به کاربر نشان دهید که ابزار در حال کار است.

سادگی: ابزارها را تک‌منظوره طراحی کنید.

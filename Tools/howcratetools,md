راهنمای نهایی: ساخت ابزارهای سفارشی برای Saino Elite v3.0معماری جدید Saino Elite به شما اجازه می‌دهد تا به راحتی ابزارهای پایتونی خود را بسازید و آن‌ها را به صورت پویا به برنامه اضافه کنید. هر ابزار جدید، یک قابلیت تازه به Agent هوشمند شما می‌بخشد.مفهوم اصلیبرنامه به صورت خودکار فایل‌های پایتون موجود در پوشه tools/ را اسکن کرده و هر کلاسی که از BaseTool ارث‌بری کرده باشد را به عنوان یک ابزار جدید شناسایی و بارگذاری می‌کند.ساختار یک ابزارهر ابزار باید در یک فایل پایتون مجزا در پوشه tools/ قرار گیرد و ساختار زیر را داشته باشد:کلاس BaseToolاین یک کلاس پایه انتزاعی (Abstract) است که ساختار اصلی هر ابزار را تعریف می‌کند. شما باید از این کلاس ارث‌بری کنید.name (str): مهم: نام منحصر به فرد ابزار (انگلیسی و بدون فاصله). این نام توسط مدل LLM برای فراخوانی ابزار استفاده می‌شود.description (str): بسیار مهم: توضیح کامل و دقیق عملکرد ابزار به زبان طبیعی. این توضیح به مدل کمک می‌کند تا بفهمد چه زمانی و چرا باید از این ابزار استفاده کند. هرچه این توضیح بهتر باشد، عملکرد Agent شما هوشمندتر خواهد بود.parameters (dict): یک دیکشنری مطابق با استاندارد JSON Schema که پارامترهای ورودی ابزار شما را تعریف می‌کند. این به مدل می‌فهماند که چه اطلاعاتی را باید برای اجرای ابزار فراهم کند.execute(self, **kwargs) (async def): متد اصلی که منطق ابزار شما در آن پیاده‌سازی می‌شود. این متد باید به صورت async تعریف شود و یک دیکشنری به عنوان خروجی برگرداند.مثال کامل: ساخت ابزار get_weatherفرض کنید می‌خواهیم ابزاری بسازیم که آب‌وهوای یک شهر را با استفاده از یک API خارجی اعلام کند.۱. نصب کتابخانه: ابتدا کتابخانه مورد نیاز برای درخواست‌های وب را نصب می‌کنیم: pip install aiohttp۲. ایجاد فایل: یک فایل جدید به نام weather_tool.py در پوشه tools/ ایجاد کنید.۳. نوشتن کد: محتوای فایل را به صورت زیر بنویسید:# tools/weather_tool.py

# وارد کردن کلاس پایه و سایر نیازمندی‌ها
# توجه: __main__ به فایل اصلی برنامه (saino_v3_final.py) اشاره دارد
# این به شما اجازه می‌دهد به متغیرهای سراسری مانند logger دسترسی داشته باشید.
from __main__ import BaseTool, logger
import aiohttp 
import chainlit as cl # برای ارسال پیام به کاربر در حین اجرا

class WeatherTool(BaseTool):
    # ۱. تعریف نام و توضیحات
    name = "get_weather"
    description = "اطلاعات آب‌وهوای فعلی یک شهر خاص را از یک سرویس آنلاین دریافت می‌کند."

    # ۲. تعریف پارامترهای ورودی با JSON Schema
    parameters = {
        "type": "object",
        "properties": {
            "city": {
                "type": "string",
                "description": "نام شهر، به عنوان مثال: Tehran"
            },
            "unit": {
                "type": "string",
                "description": "واحد دما، 'celsius' یا 'fahrenheit'. پیش‌فرض 'celsius' است.",
                "enum": ["celsius", "fahrenheit"]
            }
        },
        "required": ["city"], # پارامتر city اجباری است
    }

    # ۳. پیاده‌سازی منطق اجرایی ابزار
    async def execute(self, city: str, unit: str = "celsius") -> dict:
        logger.info(f"ابزار آب‌وهوا برای شهر '{city}' فراخوانی شد.")
        
        # ارسال پیام به کاربر که فرآیند شروع شده است
        await cl.Message(content=f"🌦️ در حال دریافت اطلاعات آب‌وهوا برای شهر {city}...").send()

        # در اینجا باید به یک API واقعی آب‌وهوا متصل شوید.
        # برای این مثال، از یک API رایگان استفاده می‌کنیم.
        API_URL = f"[https://wttr.in/](https://wttr.in/){city}?format=j1"
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(API_URL) as response:
                    response.raise_for_status() # اگر خطا بود، Exception ایجاد می‌کند
                    data = await response.json()

            current_condition = data['current_condition'][0]
            temp_key = 'temp_C' if unit == 'celsius' else 'temp_F'
            
            result = {
                "city": data['nearest_area'][0]['areaName'][0]['value'],
                "temperature": current_condition[temp_key],
                "condition": current_condition['weatherDesc'][0]['value'],
                "humidity": current_condition['humidity'] + "%",
                "wind_speed": current_condition['windspeedKmph'] + " km/h",
                "unit": unit
            }
            
            # خروجی موفق باید یک دیکشنری با status='ok' باشد
            return {"status": "ok", "data": result}

        except Exception as e:
            logger.error(f"خطا در دریافت اطلاعات آب‌وهوا: {e}")
            # خروجی ناموفق باید شامل کلید error باشد
            return {"status": "error", "error": f"اطلاعات آب‌وهوا برای شهر '{city}' یافت نشد. لطفاً نام شهر را به انگلیسی وارد کنید."}

نکات کلیدی و بهترین شیوه‌هاتوضیحات دقیق (Description): این مهم‌ترین بخش ابزار شماست. آن را طوری بنویسید که یک انسان بتواند بفهمد ابزار شما چه کاری انجام می‌دهد. از مثال زدن نترسید.خروجی استاندارد: همیشه خروجی متد execute را به صورت یک دیکشنری با کلید status برگردانید.در صورت موفقیت: {"status": "ok", "data": ...}در صورت شکست: {"status": "error", "error": "توضیح خطا"}مدیریت خطا: همیشه کدهای خود را داخل بلوک try...except قرار دهید تا خطاهای غیرمنتظره باعث از کار افتادن کل برنامه نشوند.اطلاع‌رسانی به کاربر: استفاده از cl.Message در داخل ابزار، تجربه کاربری بهتری ایجاد می‌کند، زیرا کاربر متوجه می‌شود که Agent در حال انجام چه کاری است.سادگی: ابزارهای خود را تا حد امکان ساده و تک‌منظوره طراحی کنید. به جای یک ابزار پیچیده که ده کار انجام می‌دهد، ده ابزار ساده بسازید.با دنبال کردن این راهنما، شما می‌توانید به سادگی و به سرعت، قابلیت‌های Agent هوشمند Saino Elite را گسترش دهید.
